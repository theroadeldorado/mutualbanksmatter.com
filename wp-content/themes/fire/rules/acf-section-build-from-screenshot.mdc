---
description:
globs:
alwaysApply: false
---
## üõ†Ô∏è Prompt: Figma Component ‚Üí ACF + Template (1 Section)

> **IMPORTANT:** All ACF fields for new sections MUST follow the conventions in [acf-field-rules.mdc](mdc:.cursor/rules/acf-field-rules.mdc). Always reference and apply those rules for field types, settings, and naming.

Analyze the provided **Figma component URL** and build out the ACF fields and PHP template. **NEVER EVER** Use the name to imply anything about what you are building. Only use the Figma component visual design for that to make decisions. The section could be called 'icon grid' but have no icons and structured like a 'hero' section.

### üìã Figma Workflow:
1. **Extract node ID** from the provided Figma URL (e.g., `https://figma.com/design/:fileKey/:fileName?node-id=1-2` ‚Üí nodeId: `1:2`)
2. **Use Figma MCP tools** to get both the component image AND code:
   - `get_image` - Visual reference for layout and design
   - `get_code` - Detailed React/Tailwind code with exact dimensions, colors, typography, and structure
3. **Analyze both visual and code** to determine:
   - Exact layout structure and grid proportions
   - Precise typography specifications (font sizes, line heights, weights)
   - Color values and design tokens
   - Component hierarchy and content organization
   - Interactive elements and states
   - **Convert Figma pixel values to Tailwind spacing scale** (e.g., 311px ‚Üí w-78, 303px ‚Üí w-76)
4. **Apply Tailwind 4.0 styling** to match the Figma design exactly using utility classes
5. **Check for existing @utility classes** before creating custom styles:
   - Search CSS files: `grep -r "@utility" theme/assets/styles/`
   - Use existing classes like `.link`, `.link-arrow`, `heading-*`, `text-*`, `cta-*`
6. **Use existing component classes** (.link, .button, .wizzy) when appropriate and combine with Tailwind utilities
7. **Reference Figma design tokens** for consistent styling (colors, typography, spacing)

---

### üéØ Objective:

Generate WordPress ACF field configuration and a starter template for a single section. Once the section layout and content are understood from the screenshot, move into implementation.

---

### üìÅ Expected Files:

- Section name ACF group JSON file (new file)
- New PHP file section-name.php
- Update "Page Sections" ACF group file (`wp-content/themes/fire/acf-json/group_5eb2da1550e86.json`)

---

### üîç 1. Section Name

- Use the provided <SECTION_NAME> to help name the section

---

### üß± 2. ACF Field Group
- **Title**: Use the section name (e.g., "Testimonial Featured")
- Create fields for:
  - All visible **content** (text, images, buttons, icons)
  - Any relevant **settings** (layout options, toggles, colors)
- **ALL FIELDS MUST FOLLOW THE RULES IN  [acf-field-rules.mdc](mdc:.cursor/rules/acf-field-rules.mdc) **
  - Always reference [acf-field-rules.mdc](mdc:.cursor/rules/acf-field-rules.mdc) for field type, settings, and naming conventions.
- Organize fields under tabs:
  - `Content`
  - `Settings`
- Always clone settings from the acf group `group_5eb46ce236fe0`
- Always set group to `"active": false,`
- If adding a Title field and it might be a h1-h6 always clone from acf group `group_66bcb4cd848b9`
- Use [example-acf-group.json](mdc:.ai-context/example-acf-group.json) for a base example to follow.
- **Save the ACF JSON export** to:
  `wp-content/themes/fire/acf-json/<autogenerated>.json`
- Ensure the generated file conforms to the rules [acf-field-rules.mdc](mdc:.cursor/rules/acf-field-rules.mdc)

**DO NOT OVERRIDE ANOTHER SECTION WHEN BUILDING THE JSON ‚Äî ONLY ADD TO THE SECTIONS IN STEP 3**

---

### üîó 3. Flexible Content Integration

- Add the section as a new layout inside the `Page Sections` flexible content field group:
  - File:
    `acf-json/group_5eb2da1550e86.json`

---

### üßæ 4. Template File

- Create a new folder using **kebab-case** of the section name:
  `wp-content/themes/fire/templates/components/<section-name>/`

- Inside it, create the PHP file:
  `wp-content/themes/fire/templates/components/<section-name>/<section-name>.php`

- Scaffold the file with:

  - Standard section PHP wrapper
  - Set up the basics of displaying fields on the template using the other components as examples
    - Render repeaters
    - Add content wrapper on **if** checks based on the fields

- **‚úÖ TAILWIND 4.0 STYLING REQUIREMENTS: ‚úÖ**
  - **USE TAILWIND 4.0 UTILITY CLASSES** to match the Figma design exactly
    - ADD appropriate Tailwind classes for typography, spacing, colors, layout, etc.
    - DO NOT add BEM-style classes like "section__element"
    - COMBINE existing component classes (.link, .button, .wizzy) with Tailwind utilities
    - Example: `<div class="py-16 lg:py-24 bg-gray-50">` for section spacing and background
  - **TYPOGRAPHY CLASSES:** Always use the typography utility classes from [typography.css](mdc:theme/assets/styles/base/typography.css):
    - **Headings:** Use `heading-1`, `heading-2`, `heading-3`, `heading-4`, `heading-5`, `heading-6` instead of custom text sizes
    - **Body Text:** Use `text-lg`, `text-base`, `text-sm`, `text-xs` for consistent body text
    - **CTAs/Links:** Use `cta-base`, `cta-sm` for call-to-action text styling
    - **Special Text:** Use `kicker` for small uppercase labels
  - **MATCH FIGMA DESIGN:** Use Tailwind classes to replicate colors, typography, spacing, and layout from Figma
  - **SECTION CLASSES:** Use `$section->add_classes()` method to add the section name for identification
  - **RESPONSIVE DESIGN:** Include responsive prefixes (sm:, md:, lg:, xl:) for proper mobile/tablet/desktop layouts

- **ALL PHP markup, especially for repeaters and images, MUST EXACTLY follow the code patterns and conventions in @section-markup-rules.mdc.**
  - **For ACF repeaters, you MUST use the `have_rows()`/`the_row()` loop pattern as shown in @section-markup-rules.mdc.**
  - **NEVER use `foreach` or any other loop for ACF repeaters.**
  - **For images, ALWAYS use the ResponsivePics pattern and sizes as shown in @section-markup-rules.mdc.**
  - **If you do not follow these patterns, it is considered a bug.**
  - **Reference @section-markup-rules.mdc for every section template you create or update.**

Look at @example-section for a base example.

---

### üñ•Ô∏è 5. JavaScript Implementation (if needed)

- If the section requires interactive elements, create a JavaScript file:
  `wp-content/themes/fire/templates/components/<section-name>/<section-name>.js`
- Never use JS for modals allways use the popover api @https://developer.mozilla.org/en-US/docs/Web/API/Popover_API. Then use tailwind css @https://tailwindcss.com/docs/hover-focus-and-other-states#starting-style to animate.

- **JavaScript Structure:**
  - Use the Alpine.js component pattern as shown in @example-section.js
  - Export a default function that returns an object with your component data and methods
  - Include initialization in the `init()` method
  - Don't build any JS functionality just scaffold the file
  - Don't forget to import and register the component in main.js:
    ```js
    // In main.js:
    import sectionName from '../templates/components/<section-name>/<section-name>';
    Alpine.data('sectionName', sectionName);
    ```
- **Alpine Guidelines:**
	- Never use `x-transition` allways opt for `:class` and uses tailwind css to handle animations.
	- Always use `x-collapse` for accordions or "The Details disclosure element" from @https://alpinejs.dev/plugins/collapse, if this is not in the project install it. Then update [main.js](mdc:theme/main.js) to import and initialize it.

- **JavaScript Guidelines:**
  - Keep interactive functionality self-contained in the component
  - Use the `variables` object to access data passed from PHP
  - Initialize state variables at the top of the component
  - Ensure proper cleanup in complex components

Look at @example-section.js for a base example.

---

### üìö Additional Reference

- `wp-content/themes/fire/inc/fire-section.php`
  Describes how custom sections are registered and rendered.

---

### üì¶ Output:

- ‚úÖ ACF Group JSON (as string)
- ‚úÖ Updated `Page Sections` JSON
- ‚úÖ PHP template (as raw text)